@page "/timer"
@inject IJSRuntime js

<div style="font-size:40px; margin-left:15px;" class="timer">
    @miCounter : @secCounter
</div>
<button class="btn btn-lg btn-success" disabled=@IsTaskRunning @onclick="StartTimer">Start</button>
<button class="btn btn-lg btn-danger" @onclick="StopTimer">Stop</button>
<div><p>Đã qua: @timeOut lần, chu kì 5 phút</p></div>

@code{
    private static System.Timers.Timer secTimer;
    private int timeOut = 0;
    private int secCounter = 59;
    private int miCounter = 24;
    bool IsTaskRunning = false;
    public void StartTimer()
    {
        if (secTimer != null)
        {
            secTimer.Dispose();
        }
        secTimer = new System.Timers.Timer(1000);
        secTimer.Elapsed += CountDownTimerSec;
        secTimer.Enabled = true;
        secTimer.AutoReset = true;
        IsTaskRunning = true;
    }
    public void StopTimer()
    {
        secTimer.Enabled = false;
        IsTaskRunning = false;
        secTimer.Stop();
    }
    public void CountDownTimerSec(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (secCounter > 0)
        {
            secCounter -= 1;
            if (miCounter % 5 == 0 && secCounter == 0)
            {
                timeOut += 1;
            }
        }
        else if (secCounter == 0 && miCounter >0)
        {
            miCounter -= 1;
            secCounter = 59;
            if (miCounter == 0)
            {
                secCounter = 0;
                secTimer.Stop();
                secTimer.Enabled = false;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void PlusTimer()
    {

        if (miCounter == 0 && secCounter == 0)
        {
            miCounter += 4;
            secCounter = 59;
        }
        else
        {
            miCounter += 5;
        }
    }
    public void MinusTimer()
    {
        miCounter -= 5;
        if (miCounter < 0)
        {
            miCounter = 0;
        }
    }
}
